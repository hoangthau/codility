/*
This is a demo task.
Write a function:
function solution(A);
that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.
For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.
For another example, given A = [1, 2, 3], the function should return 4.
Given A = [−1, −3], the function should return 1.
Assume that:
N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].
Complexity:
expected worst-case time complexity is O(N);
expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.
*/

function solution(A){
  var len = A.length;
  var missingElem = [];
  A.sort(function(){
    return a - b;
  });
  
  for(var i =0; i < len; i++) {
    if(i ===0 && A[i] > 1) {
      missingElem.push(1
    }
    if(A[i] + 1 < A[i+1] && A[i] + 1 > 0) {
      missingElem.push(A[i] + 1);
    }
    if(i === len-1 && !missingElem.length && A[i] + 1 < 1000000){
      missingElem.push(A[i] + 1);
    }
  }
  if(!missingElem.length) {
    missingElem.push(1);
  }
  
  var min = Math.min.apply(null, missingElem);
  return min > 0 ? min : 1;
}
